{"version":3,"file":"index-81a98f4f.esm.js","sources":["../../src/components/ExampleFetchComponent/ExampleFetchComponent.tsx","../../src/components/ExampleComponent/ExampleComponent.tsx"],"sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\n// import { useAsync } from 'react-use';\n// import Alert from '@material-ui/lab/Alert';\n// import {\n//   // Table,\n//   TableColumn,\n//   Progress,\n//   gitlabAuthApiRef,\n//   useApi,\n// } from '@backstage/core';\n// import { graphql } from '@octokit/graphql';\nimport { Table } from \"reactstrap\";\nimport axios from 'axios';\n// const query = `{\n//   viewer {\n//     repositories(first: 100) {\n//       totalCount\n//       nodes {\n//         name\n//         createdAt\n//         description\n//         diskUsage\n//         isFork\n//       }\n//       pageInfo {\n//         endCursor\n//         hasNextPage\n//       }\n//     }\n//   }\n// }`;\n// const query = `{\n//   projects {\n//   }\n// }`\n\n// type Node = {\n//   name: string;\n//   // createdAt: string;\n//   // description: string;\n//   // diskUsage: number;\n//   // isFork: boolean;\n//   // title: string,\n//   // description: string,\n// };\n\n// type Viewer = {\n//   projects: {\n//       nodes: Node[];\n//   };\n// };\n\n// type DenseTableProps = {\n//   viewer: IData;\n// };\n\n// export const DenseTable = ({ viewer }: DenseTableProps) => {\n//   console.log(\"viewer\", viewer)\n//   const columns: TableColumn[] = [\n//     { title: 'Name', field: 'name' },\n//     // { title: 'Created', field: 'createdAt' },\n//     // { title: 'Description', field: 'description' },\n//     // { title: 'Title', field: 'title' },\n//     // { title: 'Disk Usage', field: 'diskUsage' },\n//     // { title: 'Fork', field: 'isFork' },\n//   ];\n\n//   return (\n//     <Table\n//       title=\"List Of User's Repositories\"\n//       options={{ search: false, paging: false }}\n//       columns={columns}\n//       data=\n//     />\n//   );\n// };\ninterface IData {\n  name: string;\n}\nconst defaultData: IData[] = [];\nexport const ExampleFetchComponent = () => {\n  // const auth = useApi(gitlabAuthApiRef);\n  // console.log(\"auth::\", auth)\n\n  // const { value, loading, error } = useAsync(async (): Promise<any> => {\n  // const token = 'yRy8_JFtgazWPyfgkbYA'\n  //   console.log('token', token)\n  //   const gqlEndpoint = graphql.defaults({\n  //     // Uncomment baseUrl if using enterprise\n  //     // baseUrl: 'https://github.MY-BIZ.com/api',\n  //     headers: {\n  //       authorization: `token ${token}`,\n  //     },\n  //   });\n  //   console.log(\"quer::\", query)\n  //   const { viewer } = await gqlEndpoint(query);\n  //   console.log(\"viewer::\", viewer);\n  //   return viewer;\n  // }, []);\n\n  // if (loading) return <Progress />;\n  // if (error) return <Alert severity=\"error\">{error.message}</Alert>;\n  // if (value && value.repositories) return <DenseTable viewer={value} />;\n  const [data, setData]: [IData[], (data: IData[]) => void] = useState(defaultData);\n  // const [loading, setLoading]: [boolean, (loading: boolean) => void] = React.useState<boolean>(true);\n  const [error, setError]: [string, (error: string) => void] = React.useState(\"\");\n  // const auth = useApi(gitlabAuthApiRef);\n  // const token = auth.getAccessToken();\n  const token = 'tawMrtgJ89NGY2Ji2jwx'\n  console.log('token', token)\n  const config = {\n    headers: { Authorization: `Bearer ${token}` }\n  }\n  useEffect(() => {\n    // const getData = async () => {\n    //   await axios.get('https://gitlab.com/api/v4/users/5934500/projects', config)\n    //     .then(res => {\n    //       console.log(res);\n    //       console.log(res.data);\n    //       setState(res.data);\n    //     })\n    //     .catch(error => {\n    //       console.log(error);\n    //     })\n    // }\n    // getData()\n    axios\n      .get<IData[]>(\"https://gitlab.com/api/v4/users/5934500/projects\", config)\n      .then(response => {\n        setData(response.data);\n        // setLoading(false);\n      })\n      .catch(ex => {\n        const error =\n          ex.response.status === 404\n            ? \"Resource Not found\"\n            : \"An unexpected error has occurred\";\n        setError(error);\n        // setLoading(false);\n      });\n    // return () => {\n    //   getData()\n    // }\n  }, [])\n  console.log(data);\n\n  return (\n    // <Table\n    //   title=\"List Of User's Repositories\"\n    //   options={{ search: false, paging: false }}\n    //   columns={[]}\n    //   data={[]}\n    // />\n    <Fragment>\n      <div className=\"App\">\n        {data.map(value => {\n          return (\n            <Table>\n              <thead>\n                <tr>\n                  <th>\n                    Name\n                  </th>\n                  {value.name}\n                </tr>\n              </thead>\n            </Table>\n          )\n          })}\n        {error && <p className=\"error\">{error}</p>}\n      </div>\n    </Fragment>\n  );\n};\n\n// export default ExampleFetchComponent;","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport { identityApiRef, useApi, } from '@backstage/core';\nimport {\n  InfoCard,\n  Header,\n  Page,\n  Content,\n  ContentHeader,\n  HeaderLabel,\n  SupportButton,\n} from '@backstage/core';\nimport { ExampleFetchComponent } from '../ExampleFetchComponent';\n\nexport const ExampleComponent = () => {\n  // our API hook\n  const identityApi = useApi(identityApiRef);\n\n  // data to use\n  const userId = identityApi.getUserId();\n  const profile = identityApi.getProfile();\n  return (\n    <Page themeId=\"tool\">\n      <Header title=\"Welcome to gitlab-playground!\" subtitle=\"Optional subtitle\">\n        <HeaderLabel label=\"Owner\" value=\"Team X\" />\n        <HeaderLabel label=\"Lifecycle\" value=\"Alpha\" />\n      </Header>\n      <Content>\n        <ContentHeader title=\"Plugin title\">\n          <SupportButton>A description of your plugin goes here.</SupportButton>\n        </ContentHeader>\n        <Grid container spacing={3} direction=\"column\">\n          <Grid item>\n            <InfoCard title={userId}>\n              <Typography variant=\"body1\">\n              {`${profile.displayName} | ${profile.email}`}\n            </Typography>\n            </InfoCard>\n          </Grid>\n          <Grid item>\n            <ExampleFetchComponent />\n          </Grid>\n        </Grid>\n      </Content>\n    </Page>\n  )\n};\n"],"names":[],"mappings":";;;;;;AA+EA,MAAM,cAAuB;MAChB,wBAAwB,MAAM;AAuBzC,QAAM,CAAC,MAAM,WAA+C,SAAS;AAErE,QAAM,CAAC,OAAO,YAA+C,MAAM,SAAS;AAG5E,QAAM,QAAQ;AACd,UAAQ,IAAI,SAAS;AACrB,QAAM,SAAS;AAAA,IACb,SAAS,CAAE,eAAe,UAAU;AAAA;AAEtC,YAAU,MAAM;AAad,UACG,IAAa,oDAAoD,QACjE,KAAK,cAAY;AAChB,cAAQ,SAAS;AAAA,OAGlB,MAAM,QAAM;AACX,YAAM,SACJ,GAAG,SAAS,WAAW,MACnB,uBACA;AACN,eAAS;AAAA;AAAA,KAMZ;AACH,UAAQ,IAAI;AAEZ,6CAOG,UAAD,0CACG,OAAD;AAAA,IAAK,WAAU;AAAA,KACZ,KAAK,IAAI,WAAS;AACjB,+CACG,OAAD,0CACG,SAAD,0CACG,MAAD,0CACG,MAAD,MAAI,SAGH,MAAM;AAAA,MAMhB,6CAAU,KAAD;AAAA,IAAG,WAAU;AAAA,KAAS;AAAA;;MC3J3B,mBAAmB,MAAM;AAEpC,QAAM,cAAc,OAAO;AAG3B,QAAM,SAAS,YAAY;AAC3B,QAAM,UAAU,YAAY;AAC5B,6CACG,MAAD;AAAA,IAAM,SAAQ;AAAA,yCACX,QAAD;AAAA,IAAQ,OAAM;AAAA,IAAgC,UAAS;AAAA,yCACpD,aAAD;AAAA,IAAa,OAAM;AAAA,IAAQ,OAAM;AAAA,0CAChC,aAAD;AAAA,IAAa,OAAM;AAAA,IAAY,OAAM;AAAA,2CAEtC,SAAD,0CACG,eAAD;AAAA,IAAe,OAAM;AAAA,yCAClB,eAAD,MAAe,iFAEhB,MAAD;AAAA,IAAM,WAAS;AAAA,IAAC,SAAS;AAAA,IAAG,WAAU;AAAA,yCACnC,MAAD;AAAA,IAAM,MAAI;AAAA,yCACP,UAAD;AAAA,IAAU,OAAO;AAAA,yCACd,YAAD;AAAA,IAAY,SAAQ;AAAA,KACnB,GAAG,QAAQ,iBAAiB,QAAQ,gDAIxC,MAAD;AAAA,IAAM,MAAI;AAAA,yCACP,uBAAD;AAAA;;;;"}