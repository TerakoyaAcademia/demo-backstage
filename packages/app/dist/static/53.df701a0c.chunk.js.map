{"version":3,"sources":["webpack:////home/raaz/Backstage-app/my-app/plugins/gitlab-playground/src/components/ExampleFetchComponent/ExampleFetchComponent.tsx","webpack:////home/raaz/Backstage-app/my-app/plugins/gitlab-playground/src/components/ExampleComponent/ExampleComponent.tsx"],"names":["defaultData","ExampleFetchComponent","data","setData","error","setError","useState","token","console","log","config","headers","Authorization","a","get","then","response","catch","ex","status","createElement","className","map","value","Table","name","ExampleComponent","identityApi","userId","getUserId","profile","getProfile","themeId","title","subtitle","label","Grid","container","spacing","direction","item","Typography","variant","displayName","email"],"mappings":"4NA+EA,MAAMA,EAAc,GACPC,EAAwB,KAuBnC,MAAOC,EAAMC,GAAW,mBAASH,IAE1BI,EAAOC,GAAY,IAAMC,SAAS,IAGnCC,EAAQ,uBACdC,QAAQC,IAAI,QAASF,GACrB,MAAMG,EAAS,CACbC,QAAS,CAAEC,cAAe,UAAUL,IAmCtC,OAjCA,oBAAU,KAaR,EAAAM,EACGC,IAAI,mDAAoDJ,GACxDK,KAAKC,IACJb,EAAQa,EAASd,QAGlBe,MAAMC,IACL,MAAMd,EACmB,MAAvBc,EAAGF,SAASG,OACR,qBACA,mCACNd,EAASD,MAMZ,IACHI,QAAQC,IAAIP,GASV,IAAMkB,cAAc,WAAU,KAC1B,IAAMA,cAAc,MAAO,CAAEC,UAAW,OACtCnB,EAAKoB,IAAIC,GAEP,IAAMH,cAAcI,EAAA,EAAO,KACvB,IAAMJ,cAAc,QAAS,KAC3B,IAAMA,cAAc,KAAM,KACxB,IAAMA,cAAc,KAAM,KAAM,QAGhCG,EAAME,SAMhBrB,GAAS,IAAMgB,cAAc,IAAK,CAAEC,UAAW,SAAWjB,MC3JvDsB,EAAmB,KAE9B,MAAMC,EAAc,aAAO,MAGrBC,EAASD,EAAYE,YACrBC,EAAUH,EAAYI,aAC5B,OACE,IAAMX,cAAc,IAAM,CAAEY,QAAS,QACjC,IAAMZ,cAAc,IAAQ,CAAEa,MAAO,gCAAmCC,SAAU,qBAChF,IAAMd,cAAc,IAAa,CAAEe,MAAO,QAASZ,MAAO,WAC1D,IAAMH,cAAc,IAAa,CAAEe,MAAO,YAAaZ,MAAO,WAEhE,IAAMH,cAAc,IAAS,KAC3B,IAAMA,cAAc,IAAe,CAAEa,MAAO,gBAC1C,IAAMb,cAAc,IAAe,KAAM,4CAE3C,IAAMA,cAAcgB,EAAA,EAAM,CAAEC,WAAW,EAAMC,QAAS,EAAGC,UAAW,UAClE,IAAMnB,cAAcgB,EAAA,EAAM,CAAEI,MAAM,GAChC,IAAMpB,cAAc,IAAU,CAAEa,MAAOL,GACrC,IAAMR,cAAcqB,EAAA,EAAY,CAAEC,QAAS,SAC3C,GAAGZ,EAAQa,iBAAiBb,EAAQc,WAIxC,IAAMxB,cAAcgB,EAAA,EAAM,CAAEI,MAAM,GAChC,IAAMpB,cAAcnB,EAAuB","file":"static/53.df701a0c.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\n// import { useAsync } from 'react-use';\n// import Alert from '@material-ui/lab/Alert';\n// import {\n//   // Table,\n//   TableColumn,\n//   Progress,\n//   gitlabAuthApiRef,\n//   useApi,\n// } from '@backstage/core';\n// import { graphql } from '@octokit/graphql';\nimport { Table } from \"reactstrap\";\nimport axios from 'axios';\n// const query = `{\n//   viewer {\n//     repositories(first: 100) {\n//       totalCount\n//       nodes {\n//         name\n//         createdAt\n//         description\n//         diskUsage\n//         isFork\n//       }\n//       pageInfo {\n//         endCursor\n//         hasNextPage\n//       }\n//     }\n//   }\n// }`;\n// const query = `{\n//   projects {\n//   }\n// }`\n\n// type Node = {\n//   name: string;\n//   // createdAt: string;\n//   // description: string;\n//   // diskUsage: number;\n//   // isFork: boolean;\n//   // title: string,\n//   // description: string,\n// };\n\n// type Viewer = {\n//   projects: {\n//       nodes: Node[];\n//   };\n// };\n\n// type DenseTableProps = {\n//   viewer: IData;\n// };\n\n// export const DenseTable = ({ viewer }: DenseTableProps) => {\n//   console.log(\"viewer\", viewer)\n//   const columns: TableColumn[] = [\n//     { title: 'Name', field: 'name' },\n//     // { title: 'Created', field: 'createdAt' },\n//     // { title: 'Description', field: 'description' },\n//     // { title: 'Title', field: 'title' },\n//     // { title: 'Disk Usage', field: 'diskUsage' },\n//     // { title: 'Fork', field: 'isFork' },\n//   ];\n\n//   return (\n//     <Table\n//       title=\"List Of User's Repositories\"\n//       options={{ search: false, paging: false }}\n//       columns={columns}\n//       data=\n//     />\n//   );\n// };\n\n\n\nconst defaultData = [];\nexport const ExampleFetchComponent = () => {\n  // const auth = useApi(gitlabAuthApiRef);\n  // console.log(\"auth::\", auth)\n\n  // const { value, loading, error } = useAsync(async (): Promise<any> => {\n  // const token = 'yRy8_JFtgazWPyfgkbYA'\n  //   console.log('token', token)\n  //   const gqlEndpoint = graphql.defaults({\n  //     // Uncomment baseUrl if using enterprise\n  //     // baseUrl: 'https://github.MY-BIZ.com/api',\n  //     headers: {\n  //       authorization: `token ${token}`,\n  //     },\n  //   });\n  //   console.log(\"quer::\", query)\n  //   const { viewer } = await gqlEndpoint(query);\n  //   console.log(\"viewer::\", viewer);\n  //   return viewer;\n  // }, []);\n\n  // if (loading) return <Progress />;\n  // if (error) return <Alert severity=\"error\">{error.message}</Alert>;\n  // if (value && value.repositories) return <DenseTable viewer={value} />;\n  const [data, setData] = useState(defaultData);\n  // const [loading, setLoading]: [boolean, (loading: boolean) => void] = React.useState<boolean>(true);\n  const [error, setError] = React.useState(\"\");\n  // const auth = useApi(gitlabAuthApiRef);\n  // const token = auth.getAccessToken();\n  const token = 'tawMrtgJ89NGY2Ji2jwx'\n  console.log('token', token)\n  const config = {\n    headers: { Authorization: `Bearer ${token}` }\n  }\n  useEffect(() => {\n    // const getData = async () => {\n    //   await axios.get('https://gitlab.com/api/v4/users/5934500/projects', config)\n    //     .then(res => {\n    //       console.log(res);\n    //       console.log(res.data);\n    //       setState(res.data);\n    //     })\n    //     .catch(error => {\n    //       console.log(error);\n    //     })\n    // }\n    // getData()\n    axios\n      .get(\"https://gitlab.com/api/v4/users/5934500/projects\", config)\n      .then(response => {\n        setData(response.data);\n        // setLoading(false);\n      })\n      .catch(ex => {\n        const error =\n          ex.response.status === 404\n            ? \"Resource Not found\"\n            : \"An unexpected error has occurred\";\n        setError(error);\n        // setLoading(false);\n      });\n    // return () => {\n    //   getData()\n    // }\n  }, [])\n  console.log(data);\n\n  return (\n    // <Table\n    //   title=\"List Of User's Repositories\"\n    //   options={{ search: false, paging: false }}\n    //   columns={[]}\n    //   data={[]}\n    // />\n    React.createElement(Fragment, null\n      , React.createElement('div', { className: \"App\",}\n        , data.map(value => {\n          return (\n            React.createElement(Table, null\n              , React.createElement('thead', null\n                , React.createElement('tr', null\n                  , React.createElement('th', null, \"Name\"\n\n                  )\n                  , value.name\n                )\n              )\n            )\n          )\n          })\n        , error && React.createElement('p', { className: \"error\",}, error)\n      )\n    )\n  );\n};\n\n// export default ExampleFetchComponent;","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport { identityApiRef, useApi, } from '@backstage/core';\nimport {\n  InfoCard,\n  Header,\n  Page,\n  Content,\n  ContentHeader,\n  HeaderLabel,\n  SupportButton,\n} from '@backstage/core';\nimport { ExampleFetchComponent } from '../ExampleFetchComponent';\n\nexport const ExampleComponent = () => {\n  // our API hook\n  const identityApi = useApi(identityApiRef);\n\n  // data to use\n  const userId = identityApi.getUserId();\n  const profile = identityApi.getProfile();\n  return (\n    React.createElement(Page, { themeId: \"tool\",}\n      , React.createElement(Header, { title: \"Welcome to gitlab-playground!\"  , subtitle: \"Optional subtitle\" ,}\n        , React.createElement(HeaderLabel, { label: \"Owner\", value: \"Team X\" ,} )\n        , React.createElement(HeaderLabel, { label: \"Lifecycle\", value: \"Alpha\",} )\n      )\n      , React.createElement(Content, null\n        , React.createElement(ContentHeader, { title: \"Plugin title\" ,}\n          , React.createElement(SupportButton, null, \"A description of your plugin goes here.\"      )\n        )\n        , React.createElement(Grid, { container: true, spacing: 3, direction: \"column\",}\n          , React.createElement(Grid, { item: true,}\n            , React.createElement(InfoCard, { title: userId,}\n              , React.createElement(Typography, { variant: \"body1\",}\n              , `${profile.displayName} | ${profile.email}`\n            )\n            )\n          )\n          , React.createElement(Grid, { item: true,}\n            , React.createElement(ExampleFetchComponent, null )\n          )\n        )\n      )\n    )\n  )\n};\n"],"sourceRoot":""}